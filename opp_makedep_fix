#!/usr/bin/env perl
#
# opp_makedep
#
# Update dependencies in a makefile.
#
# Based on the script at:
#  http://faqchest.dynhost.com/prgm/perlu-l/perl-98/perl-9802/perl-980200/perl98020418_25228.html
#
# Rewritten by Andras Varga, 2001
#

$Usage =
'Dependency Generator for OMNeT++/OMNEST, (C) 2001-2015 OpenSim Ltd.
Updates dependencies in a makefile for a C/C++ program.

Usage: opp_makedep [options] [--] <file_list>

where possible options are:
  --help
  -Y
  -I<include-dir>
  -I <include-dir>
  --stdout
  -f<makefile-name>
  --makefile <makefile-name>
  -P<object-file-prefix>, --objprefix <object-file-prefix>
  --objsuffix <object-file-suffix>
  --msgsuffix <msg-file-suffix>
  --msghsuffix <msg-header-file-suffix>
  --msgccsuffix <msg-cc-file-suffix>
  --smsuffix <sm-file-suffix>
  --smsuffix <sm-header-file-suffix>
  --smsuffix <sm-cc-file-suffix>
  --srcdir <source-directory>
  --objdirtree
  -v

<file_list> is a list of C/C++ files for which dependencies must be generated.

 -- marks the end of the flags (optional).
 --help prints this message
 -Y causes opp_makedep to ignore (and also leave out from the dependencies)
   the include files that cannot be found.
 -I adds directories to the include search path
 -f,--makefile specifies the makefile in which to substitute. Defaults to
   "Makefile".
 --stdout causes dependencies to be written to the standard output,
   (instead of updating a makefile)
 -P, --objprefix prefixes each object file with the given string. When used,
   prefix is usually a directory prefix (for example "$(OBJDIR)/").
 --objsuffix sets the suffix of the object filename. It defaults to ".o".
 --msgsuffix, --msghsuffix, --msgccsuffix  specify the suffixes for .msg
   files and the files generated from them.
 --smsuffix, --smsuffix, --smsuffix  specify the suffixes for .sm
   files and the files generated from them.
 --srcdir specifies the directory for the source files.
 --objdirtree the object files are assumed to be in a similar directory
   structure as the sources (by default, they are assumed to be all in a
   single directory)
 -v, --verbose  print progress information

Bug (feature): ignores #ifdefs altogether.

';

use Cwd qw(realpath);

# the #include syntax we are looking for
$Syntax = '^\s*#\s*include\s+["<]([^">]*)([">])' ;

# cache. key: filename (project relative), value: array of include files (with project relative path)
$IncludeCache = ();

# marker line in the makefile
$Separator = '# DO NOT DELETE THIS LINE -- make depend depends on it.';

# IncludePath is a list of the directories to search for includes
@IncludePath = ();

# CFileList is a list of files that need to be scanned for #include
@CFileList = ();

# Below is the default suffix for the object file printed in the
# dependency list.  This default is overriden with --objsuffix
$ObjSuffix = ".o";

# Message file suffix, and suffix of the files generated from them
$MsgSuffix = ".msg";
$MsgHSuffix = "_m.h";
$MsgCCSuffix = "_m.cc";

# State Machine file suffix, and suffix of the files generated from them
$SmSuffix = ".sm";
$SmHSuffix = "_sm.h";
$SmCCSuffix = "_sm.cc";

# Source directory
$SourceDirectory = "";

# Prefix for object files in the generated dependencies (usually "$(OBJDIR)/"
# or something like that)
$ObjPrefix = "";

# If set, the object files are assumed to be in the same directory structure
# as the sources. Otherwise, they're assumed to be all in the same directory.
$ObjDirTree = 0;

# If this flag is set, include files that are not found in the search path are
# ignored. (Otherwise they cause an error.) The -Y option sets the flag to 1.
$IgnoreStdHeaders = 0;

# If set, writes dependencies to standard output instead up updating a makefile
$UseStdout = 0;

# Name of the makefile in which the dependencies should be substituted
$Makefile = "Makefile";

# Whether to be verbose
$Verbose = 0;

#
# If no args, print usage
#
if ($#ARGV == -1)
{
    print $Usage;
    exit(0);
}

#
#  This first thing this script does is parse the command line
#  for include path specifications, options, and files.
#
$accept_flags = 1;
while (@ARGV)
{
    $arg = shift @ARGV;

    if (!$accept_flags)
    {
        # after "--", everything is treated as input file name
        # call glob for Windows' sake
        push(@CFileList, glob($arg));
    }
    elsif ($arg eq "--")
    {
        $accept_flags = 0;
    }
    elsif ($arg eq "--help")
    {
        print $Usage;
        exit(1);
    }
    elsif ($arg eq "-I")
    {
        $dir_name = shift @ARGV;
        push(@IncludePath, $dir_name);
    }
    elsif ($arg =~ /^-I/)
    {
        $arg =~ s/^-I//;
        push(@IncludePath, $arg);
    }
    elsif ($arg eq "-Y")
    {
        $IgnoreStdHeaders = 1;
    }
    elsif ($arg eq "--stdout")
    {
        $UseStdout = 1;
    }
    elsif ($arg eq "--makefile")
    {
        $Makefile = shift @ARGV;
    }
    elsif ($arg eq "-f")
    {
        $Makefile = shift @ARGV;
    }
    elsif ($arg =~ /^-f/)
    {
        $arg =~ s/^-f//;
        $Makefile = $arg;
    }
    elsif ($arg eq "--objsuffix")
    {
        $ObjSuffix = shift @ARGV;
    }
    elsif ($arg =~ /^-P/)
    {
        $arg =~ s/^-P//;
        $ObjPrefix = $arg;
    }
    elsif ($arg eq "--objprefix")
    {
        $ObjPrefix = shift @ARGV;
    }
    elsif ($arg eq "--msgsuffix")
    {
        $MsgSuffix = shift @ARGV;
    }
    elsif ($arg eq "--msghsuffix")
    {
        $MsgHSuffix = shift @ARGV;
    }
    elsif ($arg eq "--msgccsuffix")
    {
        $MsgCCSuffix = shift @ARGV;
    }
    elsif ($arg eq "--smsuffix")
    {
        $SmSuffix = shift @ARGV;
    }
    elsif ($arg eq "--smhsuffix")
    {
        $SmHSuffix = shift @ARGV;
    }
    elsif ($arg eq "--smccsuffix")
    {
        $SmCCSuffix = shift @ARGV;
    }
    elsif ($arg eq "--objdirtree")
    {
        $ObjDirTree = 1;
    }
    elsif ($arg eq "--srcdir")
    {
        $SourceDirectory = shift @ARGV;
    }
    elsif ($arg eq "-v" || $arg eq "--verbose")
    {
        $Verbose = 1;
    }
    elsif ($arg =~ /^-/)
    {
        print STDERR "opp_makedep: warning: ignoring unknown option $arg (--help prints valid options)\n";
    }
    else
    {
        # otherwise we have a file name that needs to be added to the file list
        # call glob for Windows' sake
        push(@CFileList, glob($arg));
    }
}

# Remove "^" from the beginning of the prefix. This is needed to get
# "nmake -f Makefile.vc depend" working with both vc71 and vc80.
# In makemake-generated makefiles, objprefix is supposed to be "$O",
# and to prevent "$O" from being resolved prematurely by nmake, it needs
# to be quoted with "^"; however, vc80's nmake (unlike vc71 nmake) doesn't
# remove "^" from the command-line that actually invokes opp_makedep.
# Hence the workaround. Greetings to Microsoft.
$ObjPrefix =~ s/^\^//;

#
# If no files given, print warning
#
if ($#CFileList == -1)
{
    print STDERR "opp_makedep: warning: no input files\n";
    exit(0);
}

#
# for each file in the file list
#    scan it for #includes
#    print out the list of #includes
#
$Deps = "";
for (@CFileList)
{
    print "Processing $_...\n" if $Verbose;
    my @Includes = @ {&scan( $SourceDirectory.$_ ) };
    $Deps .= &print_dep( $_, @Includes );
}
if ($UseStdout) {
    print $Deps;
} else {
    update_makefile( $Deps );
}
exit(0);


sub scan {
   local($filename) = @_ ;
   %recursedFiles = ();
   $result = &do_scan($filename);
   die if %recursedFiles;  # must be empty again
   return $result;
}

#
# do_scan
#
#       This function is the guts of the dependency generation.
#  It is a recursive function that searches for #include's in
#  the file list.  If it runs into an include file, it then opens that file to
#  search for more #include's.
#
sub do_scan {
   local( $filename ) = @_ ;
   local( $included, $found, $_ );
   local( @list ) = ();
   local($IncludeDir);
   local( @result);

   if (! $IncludeCache{$filename})
   {
       my $txt = &read_file($filename);
       if ($txt eq '-')
       {
          # be more tolerant if filename contains wildcard (which means the shell couldn't expand it)
          if ($filename =~ /[\*\?]/) {
             print STDERR "opp_makedep: warning: unable to open $filename: $!\n";
          } else {
             print STDERR "opp_makedep: unable to open $filename: $!\n" ;
             exit(2);
          }
       }

       while ($txt =~ s/^\s*#\s*include\s+["<]([^">]*)([">])//m)
       {
           $included = $1;
           $delim = $2;  # " or >

           # try to find included file
           undef $found;
           if ( $included =~ /^\// )
           {
              # absolute path -- no search needed
              if (&exists($included))
              {
                 $found = 1;
              }
           }
           else
           {
              # filename only or relative path
              # if quote delimited, try relative path from location of current file
              if ($delim eq '"')
              {
                 $filename =~ /^(.*?)[^\/]*$/;
                 $dir = $1;
                 if (&exists($dir.$included))
                 {
                    $found = 1;
                    $included = $dir.$included;
                 }
              }

              # look for file in the search path
              if (!defined($found))
              {
                 foreach $IncludeDir (@IncludePath)
                 {
                    if (&exists("$IncludeDir/$included"))
                    {
                       $found = 1;
                       $included = "$IncludeDir/$included";
                       last;
                    }
                 }
              }
           }

           # if not found, either skip this file or raise error
           if (!defined($found))
           {
              if ($IgnoreStdHeaders)
              {
                 next;
              }
              else
              {
                 print STDERR "opp_makedep: file not in include path: $included (use -Y to turn off this error)\n";
                 exit(1);
              }
           }

           # if found, see if it's already on the list
           undef $found ;
           for ($[ .. $#Includes)
           {
               $found = $_, last if ( $Includes[$_] eq $included );
           }

           # nope! put it on
           if ( ! defined( $found ) )
           {
              push( @result, $included );
              push( @list, $included );
           }
       }

       # scan through each of the files that turned up
       foreach my $i (@list) {
           if (!$recursedFiles{$i}) { # guard against include cycles
               $recursedFiles{$i} = 1;
               push(@result, @{ &do_scan(Cwd::realpath($i)) } );
               delete $recursedFiles{$i};
           }
       }

       # throw out duplicates
       my %tmp;
       foreach my $i (@result) {
           $tmp{$i} = 1;
       }
       @result = keys(%tmp);

       $IncludeCache{$filename} = [ @result ];
   }

   return $IncludeCache{$filename};
}

#
# Returns true if the given file exists
#
sub exists {
   local($filename) = @_;
   return 1 if (-f $filename);

   # for *_m.h files, pretend that the file exists if the corresponding .msg file exists
   if ($filename =~ /${MsgHSuffix}$/) {
       my $msgfilename = $filename;
       $msgfilename =~ s/${MsgHSuffix}$/${MsgSuffix}/;
       return 1 if (-f $msgfilename);
   }
   elsif ($filename =~ /${MsgCCSuffix}$/) {
       my $msgfilename = $filename;
       $msgfilename =~ s/${MsgCCSuffix}$/${MsgSuffix}/;
       return 1 if (-f $msgfilename);
   }
   # ditto for *_sm.h files: pretend that the file exists if the corresponding .sm file exists
   elsif ($filename =~ /${SmHSuffix}$/) {
       my $smfilename = $filename;
       $smfilename =~ s/${SmHSuffix}$/${SmSuffix}/;
       return 1 if (-f $smfilename);
   }
   elsif ($filename =~ /${SmCCSuffix}$/) {
       my $smfilename = $filename;
       $smfilename =~ s/${SmCCSuffix}$/${SmSuffix}/;
       return 1 if (-f $smfilename);
   }
   return 0;
}

#
# Returns the file's contents if exists, otherwise returns "-" (not "" because
# that might be the actual file contents, but "-" is not valid as C/C++ code).
#
sub read_file {
   local($filename) = @_;
   local($txt);

   print "    Reading file: $filename \n" if $Verbose;
   if (!open(INFILE, $filename)) {
       if ($filename =~ /${MsgHSuffix}$/) {
           # for *_m.h files, return the corresponding .msg file contents (which will be parsed for includes)
           my $msgfilename = $filename;
           $msgfilename =~ s/${MsgHSuffix}$/${MsgSuffix}/;
           open(INFILE, $msgfilename) || return "-";
           $filename = $msgfilename;
       }
       elsif ($filename =~ /${MsgCCSuffix}$/) {
           # for *_m.cc files, pretend it exists and includes its header file
           my $msgfilename = $filename;
           $msgfilename =~ s/${MsgCCSuffix}$/${MsgSuffix}/;
           if (-e $msgfilename) {
               my $msgheaderfile = $filename;
               $msgheaderfile =~ s/${MsgCCSuffix}$/${MsgHSuffix}/;
               return "#include <$msgheaderfile>\n";
           }
           else {
               return "-";
           }
       }
       elsif ($filename =~ /${SmHSuffix}$/) {
           # for *_sm.h files, return the corresponding .sm file contents (which will be parsed for includes)
           my $smfilename = $filename;
           $smfilename =~ s/${SmHSuffix}$/${SmSuffix}/;
           open(INFILE, $smfilename) || return "-";
           $filename = $smfilename;
       }
       elsif ($filename =~ /${smCCSuffix}$/) {
           # for *_sm.cc files, pretend it exists and includes its header file
           my $smfilename = $filename;
           $smfilename =~ s/${SmCCSuffix}$/${SmSuffix}/;
           if (-e $smfilename) {
               my $smheaderfile = $filename;
               $smheaderfile =~ s/${SmCCSuffix}$/${SmHSuffix}/;
               return "#include <$smheaderfile>\n";
           }
           else {
               return "-";
           }
       }
       else {
           return "-";
       }
   }
   defined read(INFILE, $txt, 100000) || die "cannot read $filename";
   close INFILE;
   return $txt;
}

#
# Return dependencies as a string ready to be inserted into a makefile
#
sub print_dep {
   local( $filename, @includes ) = @_ ;
   local( $_ );
   local( $dep );

   $filename =~ s/^\.\///;

   if ($ObjDirTree) {
       $target = $filename;
   } else {
       $filename =~ /([^\/]*)$/;
       $target = $1;
   }
   $target =~ s/\.[^.]*$/$ObjSuffix/;
   $target = $ObjPrefix . $target;

   $dep = "$target: ";
   $dep .= join( " \\\n  ", ("$SourceDirectory$filename", sort @includes) );
   $dep .= "\n";
   return $dep;
}

#
# Update makefile with the dependencies.
#
sub update_makefile {
    local($deps) = @_;

    # read makefile
    $makefiletext = "";
    open(INPUT, $Makefile) || die "opp_makedep: cannot open $Makefile: $!";
    while (<INPUT>) {
        chomp;
        s/\r$//;  # cygwin/mingw perl does not do CR/LF translation
        $makefiletext .= $_."\n";
    }
    close(INPUT);

    # hack in dependencies
    $makefiletext =~ s/\n${Separator}.*//s;
    $makefiletext .= "\n".$Separator."\n".$deps;

    # write it back into a temp file (overwriting directly the original
    # file is not safe -- what if we're aborted during write?)
    $tmpmakefile = $Makefile.".tmp";
    open(OUT, ">$tmpmakefile") || die "opp_makedep: cannot write $tmpmakefile: $!";
    print OUT $makefiletext;
    close(OUT);

    # replace makefile with temp file.
    # but under windows, rename chokes if target file already exists.
    # thus, try unix way first, and if it fails, do in the windows way
    if (!rename($tmpmakefile, $Makefile)) {
        unlink $Makefile || die "opp_makedep: cannot replace makefile $Makefile: $!";
        rename($tmpmakefile, $Makefile) || die "opp_makedep: cannot replace makefile $Makefile: $!";
    }
}


